[語言] C++
[讀檔]
    > Vehicle input file: store all vehicles property and information
        - Format:
          [ Vehicle_id, Earliest_arrival_time, Source_angle, Destination_angle, initial_velocity ]
          (need one space between each property)
        - (Range/Unit): (any integer/) () (0-360/degree) (0-360/degree)
        - 建一個'input'的資料夾, 所有測資.in都放裡面, 讀檔的時候讀整個目錄讓他iteration運行
    > Roundabout input file: store the information of different roundabouts
       - Format:
         [ Radius, Safety_Velocity, Safety_Margin, Maximum_capacity,
           All valid source angles with one space between,
           All valid destination angles with one space between ]
       - (Range/Unit): 
         [(any real number/m) (any real number/ km/hr) (any real number/m) (any integer/)
         (0-360/degree)
         (0-360/degree)]
       - 建一個'input_ra'的資料夾, 所有測資.in都放裡面       


[檔案內容]
    > makefile: 執行main檔
    > bin
        - runner: 為執行makefile後輸出的binary檔
    > src
        - old_version
            -- 放暫時用不到的舊檔案
        - main.cpp
        - ra_mgr.cpp
        - ra_mgr.h
        - vehicle.h
    > input
        - 1.in
    > input_ra
        - ra01.in
    > output
        - 要存所有車子的解, for each vehicle: < (angle, t), (), ... >
    > schema
        - 放討論結果的照片
    > README.md
        - compile步驟寫在這
    > note.txt
        - 記錄每個檔案的用途

[待處理]
    [ 考慮輸出形式 ]
        - output file
        - xfig (畫向量圖)

    [ 考慮單台車 ]
        (o) - 每一台車有自己的 angle unit, 一次是走多少 angle, 用 velocity 轉換 (必須是圓環的 angle unit 的倍數)
            -- 在 read_vehicle 地方做轉換
            -- 依照初始值, 每格 ra_angle_unit 代表 '初速為5(m/s)的車在0.1秒內走的距離, 也就是0.5(m)'
            -- 將車子速度除以10 (因為一格為0.1秒), 超過0.5公尺就進入下一個ra_angle_unit, 小於則在同個ra_angle_unit, 例如: 初速為17(m/s) --> 0.1秒走1.7公尺 --> angle_unit 大於上一個 1.5 公尺 --> angle_unit = 2 (m)
            -- 小問題, 所以這樣做是代表我們強制讓車速變成5(m/s)的整數倍嗎?

        - 如果在 t 秒 safety_margin: 讓前一台車子加速 (不建議讓'後一台車減速') --> 連續效應 (directed graph)
            -- 想法: 如果準備超過 safety_margin 的話, 讓前一台車的 angle_unit 在下一個時間單位時變得跟自己一樣, 同理, 在更前面一台也是
            -- 想法: 檢查時機, 每次檢查的時候把現在的距離加上一個自己的angle_unit, 如果會小於安全距離, 就當場把前面一台車的angle_unit改掉
            -- 還沒想到怎麼解決的情況: 如果1號車加速, 使得前面的2號車加速, 但再前面遇到路口priority較高的3號車要進來, 迫使2號車需要減速, 1號車是要跟著減速或是? 2號車呢?
                * 想法: 路口 priority 的重要程度大於後面車子加速的重要程度
                * 作法: 在兩個安全距離外先檢查是否priority低於tring_in的車子, 如果是, 在兩個安全距離的時間內減速到該車進來的初始速度 (angle unit), 同理也讓後面原本加速的車子減速
                * 提醒: 要用到每個路口自己的queue, 才能知道每個路口最前面車的priority
                * 待改位置: greedy_without_safetymargin()
    
    [ 考慮 IN/OUT ]
        (o) - for IN: 走自己的 angle unit (在 time unit 的時間內走的距離), 在經過 intersection 時要考慮 coflict with 'trying_in'
        (o) - for OUT: 不管, 最後一個點不會出現
        - 建立 windows, 考慮一個一個區域

    [ 考慮路口的 queue ]
        - 每個路口存自己的 queue, 內容包含'車的class'/'priority排序'
            -- 想法: 在greedy_without_safetymargin()一開始的wait_list就處理
            -- 把trying_in改成queue_0, queue_90, queue_180, queue_270 (數字代表入口的位置角度)

        - 當車子距離路口 2*(safety_margin) 時, 檢查路口的 queue 會不會撞到

[2021.03.20 Hugo's modification]

    (o) - compile 問題: (MobaXTerm 不支援c++11的 'readfile(<str>)'/'stoi()')
            -- fin(infile) --> fin(infile.c_str())
            -- stoi(<str>) --> atoi(<str>.c_str())

    (o) - 定義初始值 (圓環半徑 / 圓環角度單位 / 安全距離 / 安全速度 / 車子進入圓環初速)
            -- 按照市府設計規格：半徑20公尺圓環，圓環交叉口速率25（公里/小時），相當於7（公尺/秒), 套到我們模型，參數修改為：
                ---------------------------
                [ra_mgr.cpp -> constructor] (p.s.先用固定值, 之後可以根據不同半徑對應市政設計圖的規格, 下面參數做動態變化)
                [vehicle.h  -> 新增變數: float safety_margin]
                ---------------------------
                1. ra_radius = 20（m）
                2. ra_angle_unit = 0.025 (rad) ~= 1.5 (degree), 作圖0.1秒初始走一格angle_unit, 即 0.5 公尺, (但跑檔案會超大看不清楚, 這部分再修, 可能要改作圖時間單位成1秒, 但計算時以0.1秒看待?)
                3. safety_margin = 四捨五入(自己車速/2), 初始值為 2.5 (m), i.e.初始距離, 一般轎車長度為 5 (m), 小型車至少要保持「車速/2」距離(單位：公尺)；大型車至少要保持「車速-20」距離(單位：公尺)
                4. safety_velocity = 7 (m/s), 按照市政規格設計的 25(km/hr)
                ---------------
                [input -> 1.in]
                ---------------
                5. initial velocity = 5（m/s）, 小於 safety_velocity 最好算的數字單位, 之後會連同上面參數改掉, 否則依照安全速度, 目前大家的angle_unit會都一樣

        - trying_in 想先改成每個路口的 queue, 這樣 check_conflict() 的輸入也要修正
            -- 剩下 line 216-234 要把 trying_in 改成 queue 表示法

        - 在想要不要把in檔及cpp檔等全部的角度換成弧度為單位, 這樣 ra_angle_unit 才比較好看 (0.025 rad = 1.433... degree ~= 1.5 degree, r*theta也不用換算)



1 degree= 0.017 rad
1 rad = 57.29 degree

input data angle is still in degree unit, but convert to rad unit to store
you can use Roundabout_information and Vehicle_information to check ra and vehicle data

// use in ra_mgr.cpp -> read_vehicle and read_ra_info
//define in ra_mgr.h
1. degree_to_rad() 
2. v_min_angle_unit()

// main.cpp
I use greedy_with_safetymargin, if you want to check greedy_without_safetymargin
remember to revise it

// test data
add 2.in and ra02.in just not to modify origin test data
but not use 1.in and ra01.in
> I've manually change the inputs into new type

// input generators:
use python xxx_generator.py --help to see the help information
I use argument parser in it so that we can change some parameters by argument (e.g. python ra_input_generator.py --ra_radius 20)

I suppose there will be some problem in safety_margin of ra and vehicle
need to discuss with you XD
